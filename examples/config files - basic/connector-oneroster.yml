### Adobe User Sync Tool - Oneroster Connector ###

# Oneroster is not actually an application, but a specification. Oneroster simplifies the management of rostering for
# education by standardizing the format for REST and CSV data handling. This makes it easier for service applications
# (such as Adobe) to integrate with SIS (student information systems) platforms that comply with the standard.
# It is in a school's best interest to choose Oneroster standardized platforms, because it greatly simplifies the process
# of maintaining a synchronous state between their rostering breakdown and the products their users need access to.
# An in-depth description of the standard can be found on the Oneroster homepage (IMS Globlal):

# https://www.imsglobal.org/activity/onerosterlis

# Before the creation of this connector, the only option for EDU was to use the sync tool via active directory for
# synchronization (the standard approach outlined in the setup and success guide. This allowed some limited ability to
# assign permanent licenses to faculty/staff, but there wass no way to provision licenses based on actual rostering data
# - e.g., students in Art 101 should have access to CCE products, but ONLY for one semester. Another alternative was
# to use the Oneroster compliant CSV exports to modify the admin console directly - a tedious and difficult process.

# The Oneroster connector for UST  (THIS connector) offers a better approach, by utilizing a direct interface with the
# SIS platforms, which means that the sync tool is able to leverage the full rostering information of your Oneroster
# platform. The decisions as to which way to group users (i.e., based on class, course, school, etc) are
# flexible enough to allow a wide range of potential configurations in an easy to use fashion.

# This sample file contains all of the settable options for this protocol. it is recommended that you make a copy of this
# file and edit it for your needs.  You can choose one of the example configurations below (Clever or Classlink)
# to get started.  Documentation is provided at the end of this file for quick reference, but a full reference source
# can be found on Github:

# https://github.com/adobe-dmeservices/user-sync.py/blob/oneroster/docs/en/user-manual/oneroster.md


############# Clever Example ##########################

connection:
  platform: 'clever'
  access_token: 'TEST_TOKEN'              # TEST_TOKEN is provided by Clever for sample date -- Try it out!
  host: 'https://api.clever.com/v2.1/'    # Host doesn't change for Clever, unless you need a different API version
  page_size: 1000
  max_user_count: 0

schema:
  match_groups_by: 'name'                 # Name is a good default for Clever
  key_identifier: 'id'                    # Clever uses 'id' instead of 'sourcedId'
  all_users_filter: 'users'
  default_group_filter: 'sections'        # Sections means classes
  default_user_filter: 'students'
#  include_only:
#    district: 'district #'

############# Classlink Example ######################

#connection:
#  platform: 'classlink'
#  client_id: 'client id here'             # There is no test equivalent to TEST_TOKEN as for Clever
#  client_secret: 'client secret here'
#  host: "https://example.oneroster.com/ims/oneroster/v1p1/"    # You WILL need to update this to your URL
#  page_size: 1000
#  max_user_count: 0
#
#schema:
#  match_groups_by: 'title'                # For Classlink, 'title' works for class/course.  Use 'name' for schools
#  key_identifier: 'sourcedId'             # Root ID for Classlink is 'sourcedId'
#  all_users_filter: 'users'
#  default_group_filter: 'classes'
#  default_user_filter: 'students'
#  include_only:
#    status: 'active'

######################################################

# Optional attribute fields with defaults (uncomment to use)
#user_email_format: "{email}"
#user_username_format: "{identifier}"
#user_given_name_format: "{givenName}"
#user_surname_format: "{familyName}"

# Optional attribute fields with no defaults  (uncomment to use)
#user_domain_format:
#user_country_code_format:
#user_identity_type_format:

# ---------------------------------------------------------------------------------------------------------------- #
#                                         Documentation only below this line                                       #
#                                                                                                                  #
# For full documentation, please refer to the official Github page:                                                #
# https://github.com/adobe-dmeservices/user-sync.py/blob/oneroster/docs/en/user-manual/oneroster.md                #
# ---------------------------------------------------------------------------------------------------------------- #


######  Connection ######

# platform               |  specifies which platform to use.  Can ONLY be one of: [classlink, clever]
# host                   |  endpoint for organization's OneRoster implementation.  Examples are:
#                        |      Clever: https://api.clever.com/v2.1/
#                        |      Classlink: https://example.oneroster.com/ims/oneroster/v1p1/
# client_id              |  client id - optional for Clever if token specified
# client_secret          |  client secret - optional for Clever if token specified
# access_token           |  Clever access token.  Use instead of id and secret.  This field has no effect on Classlink.
# page_size              |  api call page size.  Default is 1000.  Bigger = faster!
# max_user_count         |  api calls will cutoff after this many users. Set to 0 by default for unlimited.
#                        |  useful when doing test runs to avoid pulling very large user counts.  results tend to be
#                        |  in random orders, so do not count on this for expected values

######  Schema ######

# key_identifier         |  unique key used throughout One-Roster (sourcedId is commonly used) and is default
# match_groups_by        |  refers to the attribute on which a group is matched. (see below for examples)
# default_user_filter    |  the default filter applied to the suffix of a group name. eg: classes::name::user_filter
# default_group_filter   |  the default filter applied to the prefix of a group name. eg: group_filter::name::students
# all_users_filter       |  all users filter.  Use this with the --users all command line option to target all users
# include_only           |  provide attributes(key) and expected values (value) within the schema section.
#                        |  all users that do not meet the specified criteria will be skipped (See below for examples)


######  Attribute formatters ######

# Any names in curly braces are taken as attribute names, and everything including the braces will be replaced
# on a per-user basis with the values of the attributes.  The fields can be concatenated with any strings, outside
# of the curly braces.  e.g.,

# user_email_format: {email} will set the email field equal to the user's 'email' field
# user_email_format: {familyName}.{givenName}@example.com will make it equal to 'firstname.lastname@example.com'

# Note: ALL of these fields are optional - default values are indicated below

# user_email_format           |   sets user email field
# user_domain_format          |   sets domain field -- needed when setting username with different domain from mail
# user_username_format        |   sets username.  Needed for "username" SSO config on the Admin console
# user_given_name_format      |   sets first name for user on the admin console
# user_surname_format         |   sets last name for user on admin console
# user_identity_type_format   |   if specified, users will take this id type [adobeID, enterpriseID, federatedID]
# user_country_code_format    |   sets country code for user in adobe.  User data storage location based on this.
#                                 Normally, Oneroster does not provide this information. Takes 2 digits: [US, CA, etc]


###### Group matching ######

# The extended documentation on the match process is beyond the scope of these comments. Please refer to the full
# documentation for a deeper understanding. Here, some examples are given as a visual alternative.
# The documentation can found on the Github page:
# https://github.com/adobe-dmeservices/user-sync.py/blob/oneroster/docs/en/user-manual/oneroster.md#groups-configuration

# Now, consider the following configuration:

# ... in this file above...
# match_groups_on: 'name'

# ... in user-sync-config.yml...
# - directory_group: "classes::Math 101::students"
#        adobe_groups:
#              - "Spark"

# For the above case, the connector will return all students in the class whose 'name' is 'Math 101'.
# Now, modify the above as follows:

# ... in this file above...
# match_groups_on: 'sourcedId'

# ... in user-sync-config.yml...
# - directory_group: "classes::6ab699cf831::students"
#        adobe_groups:
#              - "Spark"

# For the above case, the connector will return all students in the class whose 'sourcedId' is '6ab699cf831'.
# We can generalize do this for any field on classes we want.  For Clever, we might use the SIS_ID:

# ... in this file above...
# match_groups_on: 'SIS_ID

# ... in user-sync-config.yml...
# - directory_group: "classes::89571::students"
#        adobe_groups:
#              - "Spark"

# For the above case, the connector will return all students in the class whose 'SIS_ID' is '89571'.
# The pattern shows that 'match_groups_on' should be set according to how you wish to identify a group
# in user-sync-config.yml, in the groups section.  The default for this field is 'name', which is the
# a good choice for Clever, since most objects have a 'name'.  For Classlink, you might consider setting
# this to 'title' for classes or courses, and 'name' for schools.


######  Inclusion filter ######

# The inclusion filter is specified as a list of key value pairs.  The value of the key is fetched for each user
# and compared to the specified value.  If the user attribute is contained in the specified value, it is
# considered a match.  A user is only selected if all of the attributes are matched.  In the future, this will
# support regex mating as well.  For now, this is a simple case insensitive match.  For example, given the below
# filter, only females in kindergarten would be selected for input.  Check the schema for your platform's user
# fields.  You can choose anything for this:

# include_only:
#   gender: "F"
#   grade: "Kindergarten"

# OR, try:

# include_only:
#   status: "active"

# which will filter out all non-active users

